import { firebaseApiKeyManager } from './firebase-api-key-manager';

export interface AIProvider {
  name: 'gemini' | 'deepseek';
  displayName: string;
  isConfigured: boolean;
}

export interface AIResponse {
  success: boolean;
  content?: string;
  error?: string;
  provider?: string;
}

class AIService {
  private static instance: AIService;

  private constructor() {}

  public static getInstance(): AIService {
    if (!AIService.instance) {
      AIService.instance = new AIService();
    }
    return AIService.instance;
  }

  /**
   * Get available AI providers and their configuration status
   */
  public getAvailableProviders(): AIProvider[] {
    const geminiKey = firebaseApiKeyManager.getGeminiKey();
    const deepseekKey = firebaseApiKeyManager.getDeepseekKey();
    
    console.log('üîç AI Provider Status Check:');
    console.log('  - Gemini Key:', geminiKey ? `Present (${geminiKey.substring(0, 10)}...)` : 'Not configured');
    console.log('  - DeepSeek Key:', deepseekKey ? `Present (${deepseekKey.substring(0, 10)}...)` : 'Not configured');

    return [
      {
        name: 'gemini',
        displayName: 'Google Gemini',
        isConfigured: !!geminiKey && geminiKey.trim() !== ''
      },
      {
        name: 'deepseek',
        displayName: 'DeepSeek',
        isConfigured: !!deepseekKey && deepseekKey.trim() !== ''
      }
    ];
  }

  /**
   * Get the best available AI provider (prioritizes configured providers)
   */
  public getBestProvider(): AIProvider | null {
    const providers = this.getAvailableProviders();
    const configuredProviders = providers.filter(p => p.isConfigured);
    
    if (configuredProviders.length === 0) {
      return null;
    }

    // Prioritize Gemini over DeepSeek if both are configured
    const gemini = configuredProviders.find(p => p.name === 'gemini');
    if (gemini) {
      return gemini;
    }

    return configuredProviders[0];
  }

  /**
   * Generate AI insights using the best available provider
   */
  public async generateInsights(prompt: string, provider?: 'gemini' | 'deepseek'): Promise<AIResponse> {
    const bestProvider = provider ? 
      this.getAvailableProviders().find(p => p.name === provider) : 
      this.getBestProvider();

    if (!bestProvider || !bestProvider.isConfigured) {
      return {
        success: false,
        error: 'No AI service configured. Please add Gemini or DeepSeek API key in Settings.'
      };
    }

    try {
      if (bestProvider.name === 'gemini') {
        return await this.callGeminiAPI(prompt);
      } else if (bestProvider.name === 'deepseek') {
        return await this.callDeepSeekAPI(prompt);
      }
    } catch (error) {
      console.error(`AI Service Error (${bestProvider.name}):`, error);
      return {
        success: false,
        error: `Failed to generate insights using ${bestProvider.displayName}: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }

    return {
      success: false,
      error: 'Unknown AI provider'
    };
  }

  /**
   * Call Google Gemini API
   */
  private async callGeminiAPI(prompt: string): Promise<AIResponse> {
    const apiKey = firebaseApiKeyManager.getGeminiKey();
    console.log('üîë Gemini API Key check:', apiKey ? `Key present (${apiKey.substring(0, 10)}...)` : 'No key found');
    
    if (!apiKey) {
      console.error('‚ùå Gemini API key not configured');
      return {
        success: false,
        error: 'Gemini API key not configured'
      };
    }

    try {
      console.log('üöÄ Making Gemini API request...');
      const requestBody = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 2000,
        }
      };
      
      console.log('üì§ Request body:', JSON.stringify(requestBody, null, 2));
      
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });
      
      console.log('üì• Response status:', response.status, response.statusText);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Gemini API Error Response:', errorData);
        throw new Error(`Gemini API Error: ${errorData.error?.message || response.statusText}`);
      }

      const data = await response.json();
      const content = data.candidates?.[0]?.content?.parts?.[0]?.text;

      if (!content) {
        throw new Error('No content generated by Gemini');
      }

      return {
        success: true,
        content: content,
        provider: 'gemini'
      };
    } catch (error) {
      console.error('‚ùå Gemini API Error:', error);
      if (error instanceof Error) {
        console.error('Error details:', {
          message: error.message,
          stack: error.stack,
          name: error.name
        });
      }
      return {
        success: false,
        error: `Gemini API Error: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  /**
   * Call DeepSeek API
   */
  private async callDeepSeekAPI(prompt: string): Promise<AIResponse> {
    const apiKey = firebaseApiKeyManager.getDeepseekKey();
    
    if (!apiKey) {
      return {
        success: false,
        error: 'DeepSeek API key not configured'
      };
    }

    try {
      const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 2000
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`DeepSeek API Error: ${errorData.error?.message || response.statusText}`);
      }

      const data = await response.json();
      const content = data.choices?.[0]?.message?.content;

      if (!content) {
        throw new Error('No content generated by DeepSeek');
      }

      return {
        success: true,
        content: content,
        provider: 'deepseek'
      };
    } catch (error) {
      console.error('DeepSeek API Error:', error);
      return {
        success: false,
        error: `DeepSeek API Error: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  /**
   * Test AI service connection
   */
  public async testConnection(provider: 'gemini' | 'deepseek'): Promise<{ success: boolean; error?: string }> {
    const testPrompt = "Hello, this is a test message. Please respond with 'Test successful' if you can read this.";
    
    try {
      const result = await this.generateInsights(testPrompt, provider);
      return {
        success: result.success,
        error: result.error
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * Check if any AI service is configured
   */
  public isAnyConfigured(): boolean {
    const providers = this.getAvailableProviders();
    return providers.some(p => p.isConfigured);
  }

  /**
   * Get configuration status message
   */
  public getConfigurationStatus(): string {
    const providers = this.getAvailableProviders();
    const configured = providers.filter(p => p.isConfigured);
    
    if (configured.length === 0) {
      return 'No AI services configured. Add Gemini or DeepSeek API key in Settings.';
    }
    
    if (configured.length === 1) {
      return `${configured[0].displayName} is configured and ready.`;
    }
    
    return `${configured.map(p => p.displayName).join(' and ')} are configured and ready.`;
  }
}

export const aiService = AIService.getInstance();
